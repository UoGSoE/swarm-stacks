version: "3.3"

# This stores it's data locally in 'throwaway' volumes.  For real usage you'd need an external
# mysql server and something like minio or nfs for wordpress storage
# To deploy this you would do something like :
#  export WORDPRESS_NAME=biomed-wiki
#  export TRAEFIK_HOSTNAME=biomed-wiki.eng.gla.ac.uk
#  docker stack deploy -c wordpress-example.yml ${WORDPRESS_NAME}
#

services:

  wordpress:
    image: wordpress
    restart: always
    container_name: wp
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - wordpress:/var/www/html
    networks:
      - proxy
      - backend
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${WORDPRESS_NAME}.rule=Host(`${TRAEFIK_HOSTNAME`)"
        - "traefik.http.routers.${WORDPRESS_NAME}.entrypoints=web"
        - "traefik.http.services.${WORDPRESS_NAME}.loadbalancer.server.port=80" # it seems you always need to give traefik a port so it 'notices' the service
        - "traefik.http.routers.${WORDPRESS_NAME}-secured.rule=Host(`${TRAEFIK_HOSTNAME`)"
        - "traefik.http.routers.${WORDPRESS_NAME}-secured.entrypoints=web-secured"
        - "traefik.http.routers.${WORDPRESS_NAME}-secured.tls.certresolver=mytlschallenge"

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - db:/var/lib/mysql
    networks:
      - backend

networks:
  backend:
  proxy:
    external: true

volumes:
  db:
  wordpress:
